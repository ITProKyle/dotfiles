#! /usr/bin/env oi
# shellcheck shell=bash

# shellcheck disable=SC2296
SCRIPT_PATH="${(%):-%x}";  # special zsh syntax
SCRIPT_NAME=$(basename "$SCRIPT_PATH")

EXIT_CODE=0;
ERRORS=();

__PYTHON_EXE="python";
__RESTORE_BACKUP="false";

function __finley::install.poetry.help {
  cat << HEREDOC

  Install poetry.

  Usage: ${SCRIPT_NAME} [OPTIONS]

  Arguments:
      -h, --help           show this help message and exit.
      --python <python>    run pipx with the specified python interpreter.
      -r, --restore        restore poetry config from a pre-determiend
                           backup location.

HEREDOC
}

function __finley::install.poetry {
  finley::install.pipx --quiet;

  if [[ -z "$(command -v poetry)" ]]; then
    oi::log.notice "poetry not found! installing it now...";
    "${__PYTHON_EXE}" -m pipx install poetry;
    "${__PYTHON_EXE}" -m pipx inject poetry "poetry-dynamic-versioning[plugin]" poetry-plugin-export --force;
    oi::log.success "poetry has been successfully installed!";

    if [[ -z "$(command -v poetry)" ]]; then
      oi::log.fatal "poetry is still not available in PATH after install";
      oi::log.fatal "additional steps are required";
      oi::exit.error;
    fi

  else
    oi::log.info "poetry is already installed";
  fi

  if [[ "${__RESTORE_BACKUP}" == "true" ]]; then
    finley::restore.poetry;
  fi
}

while [[ "${1:-}" != "" ]]; do
  case $1 in
    --help | -h)
      __finley::install.poetry.help; exit;
      ;;
    --python)
      shift;
      __PYTHON_EXE="${1:-}";
      if [[ ! -f "${__PYTHON_EXE}" ]]; then
        # shellcheck disable=SC2206
        ERRORS+=("Executable provided as \"--python ${__PYTHON_EXE}\" must be a file");
        EXIT_CODE=1;
      else
        oi::log.debug "will use ${__PYTHON_EXE} to install poetry";
      fi
      shift;
      ;;
    --restore | -r)
      __RESTORE_BACKUP="true";
      shift;
      ;;
    *)
      ERRORS+=("Unrecognized argument: $1");
      EXIT_CODE=1;
      shift;
      ;;
  esac
done

if [[ ${EXIT_CODE} -gt 0 ]]; then
  oi::log.fatal "${SCRIPT_NAME}: Fatal error(s) detected:";
  for error_text in "${ERRORS[@]}"; do
    oi::log.fatal "   ${error_text}";
  done
  oi::exit.error;
fi

__finley::install.poetry;
