#! /usr/bin/env oi
# shellcheck shell=bash

# shellcheck disable=SC2296
SCRIPT_PATH="${(%):-%x}";  # special zsh syntax
SCRIPT_NAME=$(basename "$SCRIPT_PATH")

BACKUP_DIR="${HOME}/.config/pypoetry"

EXIT_CODE=0;
ERRORS=();

function __finley::restore.poetry.help {
  cat << HEREDOC

  Restore poetry configuration files from their backup location.
  This is required when reinstalling poetry if any customizations have been made
  as they will not be retained.

  Usage: ${SCRIPT_NAME} [--help]

  Arguments:
      -h, --help           show this help message and exit

HEREDOC
}

function __finley::restore.poetry {
  local file_name restore_dir file_path;

  oi::log.info "restoring poetry config files...";

  if [[ "${__FINLEY_OS}" == "darwin" ]]; then
    restore_dir="${POETRY_HOME_MACOS}";
  else
    restore_dir="${POETRY_HOME_LINUX}";
  fi
  mkdir -p "${restore_dir}";

  for file_name in "auth.toml" "config.toml"; do
    file_path="${restore_dir}/${file_name}"

    if [[ -f "${BACKUP_DIR}/${file_name}" ]]; then
      cp "${BACKUP_DIR}/${file_name}" "${file_path}";
      oi::log.success "restored \"${BACKUP_DIR}\" to \"${file_name}\"";
    else
      oi::log.warning "no backup for ${file_name} found";
    fi
  done
}

while [[ "${1:-}" != "" ]]; do
  case $1 in
    --help | -h)
      __finley::restore.poetry.help; oi::exit.ok "nothing to do";
      ;;
    *)
      ERRORS+=("Unrecognized argument: $1");
      EXIT_CODE=1;
      shift;
      ;;
  esac
done

if [[ ${EXIT_CODE} -gt 0 ]]; then
  oi::log.fatal "${SCRIPT_NAME}: Fatal error(s) detected:";
  for error_text in "${ERRORS[@]}"; do
    oi::log.fatal "   ${error_text}";
  done
  oi::exit.error;
fi

__finley::restore.poetry;
